<?xml version="1.0" encoding="utf-8" ?>
<!-- TODO: Add a nice descriptive comment here about what the order is and how it works technically at a high level. -->
<aiscript name="yasm.order.StationMule" version="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <order id="YetAnotherStationMule" name="{966602,200}" description="{966602,201}" category="trade" infinite="true">
    <params>
      <param name="HomeStation" required="true" type="object" default="null" text="{966602,202}" comment="The home station this mule works for.">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="TradePartnerStation" required="false" type="object" default="null" text="{966602,203}" comment="The designated primary trade partner station to trade with on behalf of the home station.">
        <input_param name="class" value="[class.station]"/>
        <input_param name="owner" value="[]"/>
      </param>
      <param name="MakeSubordinateToHomeStation" required="false" type="bool" default="true" text="{96602,204}" comment="Whether this ship should become a subordinate ship of the home station or not." />
      <param name="AddWaresToTradePartner" required="false" type="bool" default="true" text="{966602,205}" comment="Whether to add product wares the home station is selling to the trade partner or not" />
      <param name="TransportIllegalWares" required="false" type="bool" default="false" text="{966602,206}" comment="Whether the ship is allowed to haul illegal goods or not." />
      <param name="ExportToOtherStationsFirst" required="false" type="bool" default="true" text="{966202,207}" comment="Try to deliver exports to other stations in range that need them before hauling to trade partner." />
      <param name="ServiceOtherStationsWhenIdle" required="false" type="bool" default="false" text="{966602,208}" comment="Whether this ship should attempt to service other stations (roam) when it has nothing else to do." />
      <param name="MaxJumpRange" required="false" type="number" default="0"  text="{966602,209}" comment="The absolute maximum jumping range to be considered for roaming transports">
        <!-- We don't want mules covering large areas of space. So the maximum a station mule will ever travel will be 5 jumps. Use a roaming mule for farther distance.-->
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="5"/>
        <input_param name="step" value ="1"/>
      </param>
      <param name="WareWhitelist" required="false" type="list" default="null" text="{966602,209}" comment="Allows the user to whitelist wares. When set only these wares will be looked at." />
    </params>
    <requires text="{966602, 210}" comment="Whitelist of ship types that are eligible for this order.">
      <match_any>
        <match shiptype="shiptype.courier" />
        <match shiptype="shiptype.miner" />
        <match shiptype="shiptype.transporter" />
        <match shiptype="shiptype.freighter" />
      </match_any>
    </requires>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler" />
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler" />
    <handler ref="FoundAbandonedHandler" />
    <handler ref="ResupplyHandler" />
    <handler ref="JobRemoveRequestHandler" />
    <handler ref="TargetInvalidHandler" />
  </interrupts>
  <init>
    <set_command_action commandaction="commandaction.standingby" />
  </init>
  <attention min="unknown">
    <actions>
      <!-- First check if this ship should be a subordinate of the home station, and if so add it as such if it's not already a subordinate. -->
      
      <!-- Next check if any wares need to be added from the home station to the trade partner if the related parameter is true. -->

      <!-- 
            Determine Home Station's resource (consumed wares that this station is not also selling, since selling indicates an excess) priorities. 
            Note that because we ignore wares that have both buy and sell offers here, this makes us able to support warehouse to warehouse trades as
            it will only be a one way trade. Meaning if this mule is assigned to a warehouse, it will only ever export wares, never import which is desired
            as importing and exporting the same good between two stations could cause an infinite loop for a given ware.
      -->
      
      <!-- Determine Home Station's export (products and excess resources) priorities -->
      
      <!-- 
            If set, check trade partner first to see if it has any of the resource priorities, and create a list of possible matches, 
            if trade partner isn't set or has no matches, check stations in range. Remember for buy orders to filter out amounts that don't 
            fill a significant amount of the hull.           
      -->

      <!-- If ExportToOtherStationsFirst check stations other than the trade partner stations in range and make a list of matches (sort by distance to home if possible), if there's nothing or this option is not set, check the trade partner station -->
      
      <!-- Check to see if we have matches. If we do check export vs import priorities (which one to do first). -->
      
      <!-- Syncpoint here, since this is a good place to end if the script needs to be canceled. Vanilla trader also does it between finding orders and actually creating them. -->      
      <!-- TODO: Figure out why vanilla (order.trade.routine) checks if order.id is itself. That bit doesn't make sense to me. -->
      <set_order_syncpoint_reached order="this.assignedcontrolled.order" />
      
      <!-- Verify amounts in a non-blocking way, and if we fall below any thresholds just move on to the next in the list. Remember to clamp.-->
      
      <!-- If we have some still valid trades, create them and end (end should happen auto-magically, especially if we add a short wait after the create)-->

      <!-- 
            If there were no valid trades found, and ServiceOtherStationsWhenIdle is true, run_script yasm.order.RoamingMule as a non-infinite (1 time) order. 
      -->

      <!-- Ensuring ending on a wait seems to be a thing that needs to be done for reasons. Don't quote me on that, I'm tired. -->
      <wait exact="1ms" />
    </actions>
  </attention>
</aiscript>