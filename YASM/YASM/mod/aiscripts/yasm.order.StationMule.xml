<?xml version="1.0" encoding="utf-8" ?>
<!-- TODO: Add a nice descriptive comment here about what the order is and how it works technically at a high level. -->
<aiscript name="yasm.order.StationMule" version="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
  <order id="YetAnotherStationMule" name="{966602,200}" description="{966602,201}" category="trade" infinite="true">
    <params>
      <param name="homeStation" required="true" type="object" default="null" text="{966602,202}" comment="The home station this mule works for.">
        <input_param name="class" value="[class.station]"/>
      </param>
      <param name="tradePartnerStation" required="false" type="object" default="null" text="{966602,203}" comment="The designated primary trade partner station to trade with on behalf of the home station.">
        <input_param name="class" value="[class.station]"/>
         <!--Doesn't seem to do anything in the UI. Can still select other stations. Need to file a bug report.-->
        <input_param name="owner" value="this.object.owner"/>
      </param>
      <param name="makeSubordinateToHomeStation" required="false" type="bool" default="true" text="{966602,204}" comment="Whether this ship should become a subordinate ship of the home station or not." />
      <param name="addWaresToTradePartner" required="false" type="bool" default="true" text="{966602,205}" comment="Whether to add product wares the home station is selling to the trade partner or not" />
      <param name="transportIllegalWares" required="false" type="bool" default="false" text="{966602,206}" comment="Whether the ship is allowed to haul illegal goods or not." />
      <param name="exportToOtherStationsFirst" required="false" type="bool" default="true" text="{966602,207}" comment="Try to deliver exports to other stations in range that need them before hauling to trade partner." />
      <param name="serviceOtherStationsWhenIdle" required="false" type="bool" default="false" text="{966602,208}" comment="Whether this ship should attempt to service other stations (roam) when it has nothing else to do." />
      <param name="maxJumpRange" required="false" type="number" default="0"  text="{966602,209}" comment="The absolute maximum jumping range to be considered for roaming transports">
         <!--We don't want mules covering large areas of space. So the maximum a station mule will ever travel will be 5 jumps. Use a roaming mule for farther distance.-->
        <input_param name="startvalue" value="0"/>
        <input_param name="min" value="0"/>
        <input_param name="max" value="5"/>
        <input_param name="step" value ="1"/>
      </param>
      <!-- This is currently bugged. A wares list after a required parameter breaks the UI for default orders (throws an onClick error). -->
      <!--<param name="WareWhitelist" required="false" default="null" type="list" text="{966602,210}" comment="Allows the player to limit what wares the station mule will haul. When set only these wares will be looked at, even if they aren't offered at the home or trade partner.">
        <input_param name="type" value="'ware'" />
        <input_param name="cancarry" value="this.ship" />
      </param>-->
    </params>
    <requires text="{966602, 230}" comment="Whitelist of ship types that are eligible for this order.">
      <match_any>
        <match shiptype="shiptype.courier" />
        <match shiptype="shiptype.miner" />
        <match shiptype="shiptype.transporter" />
        <match shiptype="shiptype.freighter" />
      </match_any>
    </requires>
  </order>
  <interrupts>
    <handler ref="SectorChangeHandler" />
    <handler ref="AttackHandler" />
    <handler ref="MissileLockHandler" />
    <handler ref="ScannedHandler" />
    <handler ref="InspectedHandler" />
    <handler ref="FoundAbandonedHandler" />
    <handler ref="ResupplyHandler" />
    <handler ref="JobRemoveRequestHandler" />
    <handler ref="TargetInvalidHandler" />
  </interrupts>
  <init>
    <debug_text text="'YASM Station Mule Init'" filter="general" chance="100"/>
    
    <set_value name="$debugChance" exact="100"/>
    <set_value name="$debugFileName" exact="'yasm_stationmule_%1_%2.log'.[this.ship.name, this.ship.idcode]"/>
    <set_value name="$debugFileDirectory" exact="'yasm'"/>
    
    <debug_text text="'YASM Station mule log file' + $debugFileName" chance="100"/>
    <debug_text text="'YASM Station mule log directory' + $debugFileDirectory" chance="100"/>
    
    <set_command_action commandaction="commandaction.standingby" />

    <include_interrupt_actions ref="GetBlacklistgroup"/>
  </init>
  <attention min="unknown">
    <actions>
      <!-- Parameter Validation. -->
      
      <!-- First check if this ship should be a subordinate of the home station, and if so add it as such if it's not already a subordinate. -->
      <debug_text text="'YASM - About to check to make subordinate.'" filter="general" chance="100"/>
      <do_if value="$makeSubordinateToHomeStation">
        <set_value name="$madeSubordinateErrorFree" exact="false"/>
        <set_value name="$makeSubordinateErrorMessage" exact="''"/>
        <set_value name="$wasSubordinateAssigned" exact="false"/>

        <debug_text text="'YASM - Calling to make subordinate.'" filter="general" chance="100"/>
        <run_script name="yasm.lib.MakeSubordinate">
          <param name="commander" value="$HomeStation"/>
          <param name="subordinate" value="this.ship"/>
          <!-- Need to see if my diff into assignments.xml actually worked. -->
          <param name="assignment" value="assignment.yasmStationMule"/>
          <save_retval name="wasErrorFree" variable="$madeSubordinateErrorFree"/>
          <save_retval name="errorMessage" variable="$makeSubordinateErrorMessage"/>
          <save_retval name="subordinateAssigned" variable="$wasSubordinateAssigned"/>
        </run_script>

        <do_if value="$madeSubordinateErrorFree == false">
          <debug_to_file name="$debugFileName" directory="$debugFileDirectory" text="'[YASM ERROR!] Error hit when trying to make this ship (name: %1 - id: %2) a subordinate of station (name: %3 - id: %4). Error Message: %5'.[this.ship.name, this.ship.idcode, $homeStation.name, $homeStation.idcode, $makeSubordinateErrorMessage]" chance="$debugChance" />
        </do_if>
      </do_if>
      
      <!-- 
            Need to determine if this is currently serving a station that's being built, which is a special case. We'll want the station mule to one way trade for the build storage in this case.
            I should probably make "build storage mule" it's own order (that supports a single target station, as well as roaming) and just call that.
      -->
      
      <!-- Next check if any wares need to be added from the home station to the trade partner if the related parameter is true. -->

      <!-- 
            Determine Home Station's resource (consumed wares that this station is not also selling, since selling indicates an excess) priorities. 
            Note that because we ignore wares that have both buy and sell offers here, this makes us able to support warehouse to warehouse trades as
            it will only be a one way trade. Meaning if this mule is assigned to a warehouse, it will only ever export wares, never import which is desired
            as importing and exporting the same good between two stations could cause an infinite loop for a given ware.
      -->
      
      <!-- Determine Home Station's export (products and excess resources) priorities -->
      
      <!-- 
            If set, check trade partner first to see if it has any of the resource priorities, and create a list of possible matches, 
            if trade partner isn't set or has no matches, check stations in range. Remember for buy orders to filter out amounts that don't 
            fill a significant amount of the hull.           
      -->

      <!-- If ExportToOtherStationsFirst check stations other than the trade partner stations in range and make a list of matches (sort by distance to home if possible), if there's nothing or this option is not set, check the trade partner station -->
      
      <!-- Check to see if we have matches. If we do check export vs import priorities (which one to do first). -->
      
      <!-- Syncpoint here, since this is a good place to end if the script needs to be canceled. Vanilla trader also does it between finding orders and actually creating them. -->      
      <!-- TODO: Figure out why vanilla (order.trade.routine) checks if order.id is itself. That bit doesn't make sense to me. -->
      <set_order_syncpoint_reached order="this.assignedcontrolled.order" />
      
      <!-- Verify amounts in a non-blocking way, and if we fall below any thresholds just move on to the next in the list. Remember to clamp.-->
      
      <!-- If we have some still valid trades, create them and end (end should happen auto-magically, especially if we add a short wait after the create)-->

      <!-- 
            If there were no valid trades found, and ServiceOtherStationsWhenIdle is true, run_script yasm.order.RoamingMule as a non-infinite (1 time) order. 
      -->

      <!-- Ensuring ending on a wait seems to be a thing that needs to be done for reasons. Don't quote me on that, I'm tired. -->
      <wait exact="1ms" />
    </actions>
  </attention>
</aiscript>